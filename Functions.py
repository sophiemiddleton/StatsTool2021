# Author : S Middleton
# Date : 2020
# Purpose : Stats functions

import sys
import math
import ROOT
from ROOT import TMath, TH1
from Histograms import Histograms
from DIO import DIO


class StatsFunctions :

    def __init__(self):
        """ Initialise the Class Object """

        '''
        Feldman-Cousins experimental sensitivities (defined as the average upper limit
        that would be obtained by an ensemble of experiments with the expected background
        and no true signal), as a function of the expected background
        */
         These number in principle match those in
         table XII in HUTP-97/A096
         arXiv.physics/9711021v2
         column 3, lines 1-9.
         at 90%CL
         double pValue    = 0.9;
         double b0        = 0;
         int    nb        = 2001;
         double bInterval = 0.005;
        '''
        self.FeldmanCousins_sensitivityValues =[
        2.435915,  2.440518,  2.445112,  2.449696,  2.454272   # 0
        ,  2.458838,  2.463396,  2.467944,  2.472484,  2.477014   # 0.025
        ,  2.481536,  2.486049,  2.490553,  2.495049,  2.499535   # 0.05
        ,  2.504013,  2.508483,  2.512944,  2.517396,  2.52184   # 0.075
        ,  2.526275,  2.530702,  2.53512,  2.53953,  2.543932   # 0.1
        ,  2.548325,  2.55271,  2.557087,  2.561455,  2.565815   # 0.125
        ,  2.570168,  2.574512,  2.578848,  2.583175,  2.587495   # 0.15
        ,  2.591807,  2.596111,  2.600407,  2.604695,  2.608975   # 0.175
        ,  2.613247,  2.617511,  2.621768,  2.626017,  2.630258   # 0.2
        ,  2.634491,  2.638717,  2.642934,  2.647145,  2.651348   # 0.225
        ,  2.655543,  2.65973,  2.66391,  2.668083,  2.672248   # 0.25
        ,  2.676405,  2.680556,  2.684698,  2.688834,  2.692962   # 0.275
        ,  2.697082,  2.701196,  2.705302,  2.709401,  2.713492   # 0.3
        ,  2.717577,  2.721654,  2.725724,  2.729787,  2.733843   # 0.325
        ,  2.737892,  2.741933,  2.745968,  2.749996,  2.754016   # 0.35
        ,  2.75803,  2.762036,  2.766036,  2.770029,  2.774015   # 0.375
        ,  2.777994,  2.781966,  2.785931,  2.78989,  2.793842   # 0.4
        ,  2.797787,  2.801725,  2.805656,  2.809581,  2.813499   # 0.425
        ,  2.817411,  2.821316,  2.825214,  2.829105,  2.83299   # 0.45
        ,  2.836869,  2.840741,  2.844606,  2.848465,  2.852317   # 0.475
        ,  2.856163,  2.860002,  2.863835,  2.867662,  2.871482   # 0.5
        ,  2.875296,  2.879103,  2.882904,  2.886699,  2.890487   # 0.525
        ,  2.894269,  2.898045,  2.901815,  2.905578,  2.909335   # 0.55
        ,  2.913086,  2.916831,  2.920569,  2.924301,  2.928839   # 0.575
        ,  2.93367,  2.938485,  2.943284,  2.948067,  2.952833   # 0.6
        ,  2.957584,  2.962319,  2.967038,  2.971741,  2.976429   # 0.625
        ,  2.981101,  2.985758,  2.990399,  2.995025,  2.999636   # 0.65
        ,  3.004232,  3.008813,  3.013379,  3.01793,  3.022466   # 0.675
        ,  3.026987,  3.031494,  3.035986,  3.040464,  3.044927   # 0.7
        ,  3.049376,  3.053811,  3.058231,  3.062638,  3.06703   # 0.725
        ,  3.071408,  3.075773,  3.080123,  3.08446,  3.088784   # 0.75
        ,  3.093093,  3.097389,  3.101672,  3.105941,  3.110197   # 0.775
        ,  3.114439,  3.118669,  3.122885,  3.127088,  3.131279   # 0.8
        ,  3.135456,  3.13962,  3.143772,  3.147911,  3.152038   # 0.825
        ,  3.156151,  3.160253,  3.164341,  3.168418,  3.172482   # 0.85
        ,  3.176534,  3.180573,  3.184601,  3.188616,  3.192619   # 0.875
        ,  3.196611,  3.20059,  3.204558,  3.208514,  3.212458   # 0.9
        ,  3.216391,  3.220312,  3.224221,  3.228119,  3.232006   # 0.925
        ,  3.235881,  3.239745,  3.243598,  3.24744,  3.25127   # 0.95
        ,  3.255089,  3.258898,  3.262695,  3.266482,  3.270258   # 0.975
        ,  3.274023,  3.277779,  3.28153,  3.285276,  3.289015   # 1
        ,  3.292749,  3.296477,  3.3002,  3.303917,  3.307628   # 1.025
        ,  3.311333,  3.315033,  3.318727,  3.322416,  3.326098   # 1.05
        ,  3.329775,  3.333447,  3.337113,  3.340773,  3.344427   # 1.075
        ,  3.348076,  3.351719,  3.355357,  3.358989,  3.362615   # 1.1
        ,  3.366235,  3.36985,  3.37346,  3.377063,  3.380661   # 1.125
        ,  3.384254,  3.38784,  3.391421,  3.394997,  3.398566   # 1.15
        ,  3.402131,  3.405689,  3.409242,  3.412789,  3.416331   # 1.175
        ,  3.419867,  3.423397,  3.426922,  3.430441,  3.433954   # 1.2
        ,  3.437462,  3.440964,  3.44446,  3.447951,  3.451437   # 1.225
        ,  3.454916,  3.45839,  3.461859,  3.465321,  3.468779   # 1.25
        ,  3.47223,  3.475676,  3.479116,  3.482551,  3.48598   # 1.275
        ,  3.489403,  3.492821,  3.496233,  3.49964,  3.503041   # 1.3
        ,  3.506436,  3.509826,  3.51321,  3.516588,  3.519961   # 1.325
        ,  3.523329,  3.52669,  3.530046,  3.533397,  3.536742   # 1.35
        ,  3.540081,  3.543415,  3.546743,  3.550066,  3.553383   # 1.375
        ,  3.556694,  3.56,  3.5633,  3.566595,  3.569884   # 1.4
        ,  3.573167,  3.576445,  3.579718,  3.582984,  3.586246   # 1.425
        ,  3.589501,  3.592751,  3.595996,  3.599235,  3.602469   # 1.45
        ,  3.605697,  3.608919,  3.612136,  3.615347,  3.618553   # 1.475
        ,  3.621754,  3.624948,  3.628138,  3.631322,  3.6345   # 1.5
        ,  3.637673,  3.64084,  3.644002,  3.647158,  3.650309   # 1.525
        ,  3.653454,  3.656594,  3.659729,  3.662858,  3.665981   # 1.55
        ,  3.669099,  3.672212,  3.675319,  3.678421,  3.681517   # 1.575
        ,  3.684608,  3.687694,  3.690774,  3.693848,  3.696918   # 1.6
        ,  3.699982,  3.70304,  3.706093,  3.709141,  3.712183   # 1.625
        ,  3.71522,  3.718252,  3.721278,  3.724299,  3.727315   # 1.65
        ,  3.730325,  3.73333,  3.736329,  3.739324,  3.742313   # 1.675
        ,  3.745296,  3.748275,  3.751248,  3.754216,  3.757178   # 1.7
        ,  3.760136,  3.763088,  3.766035,  3.768976,  3.771913   # 1.725
        ,  3.774844,  3.77777,  3.78069,  3.783606,  3.786516   # 1.75
        ,  3.789421,  3.792321,  3.795216,  3.798106,  3.80099   # 1.775
        ,  3.803869,  3.806744,  3.809613,  3.812477,  3.815336   # 1.8
        ,  3.818189,  3.821038,  3.823882,  3.82672,  3.829553   # 1.825
        ,  3.832382,  3.835205,  3.838024,  3.840837,  3.843645   # 1.85
        ,  3.846448,  3.849247,  3.85204,  3.854828,  3.857611   # 1.875
        ,  3.86039,  3.863163,  3.865932,  3.868695,  3.871454   # 1.9
        ,  3.874207,  3.876956,  3.8797,  3.882439,  3.885173   # 1.925
        ,  3.887903,  3.890627,  3.893347,  3.896061,  3.898771   # 1.95
        ,  3.901476,  3.904177,  3.906872,  3.909563,  3.912249   # 1.975
        ,  3.91493,  3.917608,  3.920283,  3.922955,  3.925625   # 2
        ,  3.928293,  3.930958,  3.93362,  3.93628,  3.938937   # 2.025
        ,  3.941592,  3.944244,  3.946894,  3.949541,  3.952186   # 2.05
        ,  3.954828,  3.957467,  3.960104,  3.962739,  3.965371   # 2.075
        ,  3.968,  3.970627,  3.973251,  3.975873,  3.978492   # 2.1
        ,  3.981109,  3.983723,  3.986335,  4.029275,  4.031665   # 2.125
        ,  4.034053,  4.03644,  4.038826,  4.04121,  4.043593   # 2.15
        ,  4.045974,  4.048354,  4.050732,  4.053109,  4.055484   # 2.175
        ,  4.057858,  4.06023,  4.062601,  4.06497,  4.067338   # 2.2
        ,  4.069704,  4.072068,  4.074431,  4.076793,  4.079152   # 2.225
        ,  4.081511,  4.083867,  4.086223,  4.088576,  4.090928   # 2.25
        ,  4.093278,  4.095627,  4.097974,  4.10032,  4.102663   # 2.275
        ,  4.105006,  4.107346,  4.109685,  4.112022,  4.114358   # 2.3
        ,  4.116692,  4.119024,  4.121355,  4.123684,  4.126011   # 2.325
        ,  4.128337,  4.130661,  4.132983,  4.135303,  4.137622   # 2.35
        ,  4.139939,  4.142255,  4.144568,  4.14688,  4.14919   # 2.375
        ,  4.151499,  4.153805,  4.15611,  4.158414,  4.160715   # 2.4
        ,  4.163015,  4.165312,  4.167609,  4.169903,  4.172195   # 2.425
        ,  4.174486,  4.176775,  4.179062,  4.181348,  4.183631   # 2.45
        ,  4.185913,  4.188193,  4.190471,  4.192747,  4.195022   # 2.475
        ,  4.197294,  4.199565,  4.201834,  4.204101,  4.206367   # 2.5
        ,  4.20863,  4.210892,  4.213151,  4.215409,  4.217665   # 2.525
        ,  4.219919,  4.222172,  4.224422,  4.22667,  4.228917   # 2.55
        ,  4.231162,  4.233405,  4.235646,  4.237885,  4.240122   # 2.575
        ,  4.242357,  4.24459,  4.246822,  4.249051,  4.251279   # 2.6
        ,  4.253505,  4.255728,  4.25795,  4.26017,  4.262388   # 2.625
        ,  4.264604,  4.266818,  4.26903,  4.271241,  4.273449   # 2.65
        ,  4.275655,  4.27786,  4.280062,  4.282263,  4.284461   # 2.675
        ,  4.286658,  4.288852,  4.291045,  4.293236,  4.295424   # 2.7
        ,  4.297611,  4.299796,  4.301979,  4.30416,  4.306338   # 2.725
        ,  4.308515,  4.31069,  4.312863,  4.315034,  4.317203   # 2.75
        ,  4.31937,  4.321535,  4.323698,  4.325859,  4.328018   # 2.775
        ,  4.330175,  4.33233,  4.334483,  4.336634,  4.338783   # 2.8
        ,  4.34093,  4.343075,  4.345218,  4.347359,  4.349498   # 2.825
        ,  4.351635,  4.35377,  4.355903,  4.358034,  4.360163   # 2.85
        ,  4.36229,  4.364415,  4.366538,  4.368659,  4.370778   # 2.875
        ,  4.391159,  4.393175,  4.39519,  4.397203,  4.399215   # 2.9
        ,  4.401225,  4.403233,  4.40524,  4.407246,  4.40925   # 2.925
        ,  4.411252,  4.413253,  4.415253,  4.417251,  4.419247   # 2.95
        ,  4.421242,  4.423235,  4.425227,  4.427217,  4.429206   # 2.975
        ,  4.431193,  4.433179,  4.435165,  4.437151,  4.439137   # 3
        ,  4.441122,  4.443108,  4.445093,  4.447078,  4.449062   # 3.025
        ,  4.451047,  4.453031,  4.455015,  4.456999,  4.458982   # 3.05
        ,  4.460965,  4.462948,  4.464931,  4.466914,  4.468896   # 3.075
        ,  4.470878,  4.472859,  4.47484,  4.476821,  4.478802   # 3.1
        ,  4.480782,  4.482762,  4.484742,  4.486721,  4.4887   # 3.125
        ,  4.490679,  4.492657,  4.494635,  4.496612,  4.498589   # 3.15
        ,  4.500566,  4.502542,  4.504518,  4.506494,  4.508469   # 3.175
        ,  4.510444,  4.512418,  4.514392,  4.516365,  4.518338   # 3.2
        ,  4.520311,  4.522283,  4.524254,  4.526225,  4.528196   # 3.225
        ,  4.530166,  4.532136,  4.534105,  4.536074,  4.538042   # 3.25
        ,  4.54001,  4.541977,  4.543943,  4.545909,  4.547875   # 3.275
        ,  4.54984,  4.551804,  4.553768,  4.555732,  4.557695   # 3.3
        ,  4.559657,  4.561618,  4.56358,  4.56554,  4.5675   # 3.325
        ,  4.569459,  4.571418,  4.573376,  4.575333,  4.57729   # 3.35
        ,  4.579247,  4.581202,  4.583157,  4.585111,  4.587065   # 3.375
        ,  4.589018,  4.59097,  4.592922,  4.594873,  4.596823   # 3.4
        ,  4.598773,  4.600722,  4.60267,  4.604618,  4.606565   # 3.425
        ,  4.608511,  4.610456,  4.612401,  4.614345,  4.616289   # 3.45
        ,  4.618231,  4.620173,  4.622114,  4.624054,  4.625994   # 3.475
        ,  4.627933,  4.629871,  4.631808,  4.633745,  4.63568   # 3.5
        ,  4.637615,  4.639549,  4.641483,  4.643415,  4.645347   # 3.525
        ,  4.647278,  4.649208,  4.651138,  4.653066,  4.654994   # 3.55
        ,  4.656921,  4.658847,  4.660772,  4.662696,  4.66462   # 3.575
        ,  4.666543,  4.668464,  4.670385,  4.672305,  4.674225   # 3.6
        ,  4.676143,  4.67806,  4.679977,  4.681893,  4.683808   # 3.625
        ,  4.685721,  4.687634,  4.689547,  4.691458,  4.701564   # 3.65
        ,  4.703429,  4.705293,  4.707157,  4.709019,  4.710881   # 3.675
        ,  4.712743,  4.714603,  4.716463,  4.718322,  4.720181   # 3.7
        ,  4.722039,  4.723896,  4.725752,  4.727608,  4.729462   # 3.725
        ,  4.731316,  4.73317,  4.735022,  4.736874,  4.738725   # 3.75
        ,  4.740575,  4.742424,  4.744273,  4.746121,  4.747968   # 3.775
        ,  4.749814,  4.75166,  4.753504,  4.755348,  4.757191   # 3.8
        ,  4.759033,  4.760874,  4.762715,  4.764555,  4.766393   # 3.825
        ,  4.768231,  4.770069,  4.771905,  4.77374,  4.775575   # 3.85
        ,  4.777409,  4.779242,  4.781074,  4.782905,  4.784735   # 3.875
        ,  4.786564,  4.788393,  4.79022,  4.792047,  4.793873   # 3.9
        ,  4.795698,  4.797522,  4.799345,  4.801167,  4.802988   # 3.925
        ,  4.804809,  4.806628,  4.808447,  4.810264,  4.812081   # 3.95
        ,  4.813897,  4.815711,  4.817525,  4.819338,  4.82115   # 3.975
        ,  4.822961,  4.824771,  4.82658,  4.828388,  4.830196   # 4
        ,  4.832002,  4.833807,  4.835611,  4.837415,  4.839217   # 4.025
        ,  4.841018,  4.842819,  4.844618,  4.846416,  4.848214   # 4.05
        ,  4.85001,  4.851806,  4.8536,  4.879407,  4.8811   # 4.075
        ,  4.882792,  4.884483,  4.886174,  4.887864,  4.889553   # 4.1
        ,  4.891242,  4.89293,  4.894618,  4.896304,  4.89799   # 4.125
        ,  4.899676,  4.901361,  4.903045,  4.904728,  4.906411   # 4.15
        ,  4.908092,  4.909774,  4.911454,  4.913134,  4.914813   # 4.175
        ,  4.916492,  4.918169,  4.919846,  4.921523,  4.923198   # 4.2
        ,  4.924873,  4.926547,  4.92822,  4.929893,  4.931565   # 4.225
        ,  4.933236,  4.934907,  4.936576,  4.938245,  4.939913   # 4.25
        ,  4.941581,  4.943248,  4.944914,  4.946579,  4.948243   # 4.275
        ,  4.949907,  4.95157,  4.953232,  4.954893,  4.956554   # 4.3
        ,  4.958214,  4.959873,  4.961531,  4.963188,  4.964845   # 4.325
        ,  4.966501,  4.968156,  4.969811,  4.971464,  4.973117   # 4.35
        ,  4.974769,  4.97642,  4.97807,  4.97972,  4.981369   # 4.375
        ,  4.983017,  4.984664,  4.98631,  4.987956,  4.989601   # 4.4
        ,  4.991245,  4.992888,  4.99453,  4.996172,  4.997812   # 4.425
        ,  4.999452,  5.001091,  5.006336,  5.007953,  5.00957   # 4.45
        ,  5.011187,  5.012802,  5.014417,  5.016031,  5.017644   # 4.475
        ,  5.019257,  5.020869,  5.02248,  5.02409,  5.0257   # 4.5
        ,  5.027309,  5.028917,  5.030524,  5.032131,  5.033737   # 4.525
        ,  5.035342,  5.036947,  5.03855,  5.040153,  5.041755   # 4.55
        ,  5.043357,  5.044957,  5.046557,  5.048156,  5.049755   # 4.575
        ,  5.051352,  5.052949,  5.054545,  5.05614,  5.057735   # 4.6
        ,  5.059328,  5.060921,  5.062514,  5.064105,  5.065696   # 4.625
        ,  5.067285,  5.068874,  5.070463,  5.07205,  5.073637   # 4.65
        ,  5.075223,  5.076808,  5.078392,  5.079976,  5.081559   # 4.675
        ,  5.083141,  5.084722,  5.086302,  5.087882,  5.08946   # 4.7
        ,  5.091038,  5.092616,  5.094192,  5.095768,  5.097343   # 4.725
        ,  5.098917,  5.10049,  5.102062,  5.103634,  5.105205   # 4.75
        ,  5.106775,  5.108344,  5.109912,  5.11148,  5.113047   # 4.775
        ,  5.114613,  5.116178,  5.117742,  5.119306,  5.120869   # 4.8
        ,  5.122431,  5.123992,  5.125552,  5.127112,  5.12867   # 4.825
        ,  5.130228,  5.131785,  5.133342,  5.134897,  5.136452   # 4.85
        ,  5.138006,  5.139559,  5.141111,  5.142663,  5.144213   # 4.875
        ,  5.145763,  5.147312,  5.14886,  5.150408,  5.151954   # 4.9
        ,  5.1535,  5.155045,  5.156589,  5.158132,  5.159675   # 4.925
        ,  5.161217,  5.162757,  5.164298,  5.165837,  5.167375   # 4.95
        ,  5.168913,  5.17045,  5.171986,  5.173521,  5.175055   # 4.975
        ,  5.187885,  5.189368,  5.190852,  5.192336,  5.193819   # 5
        ,  5.195303,  5.196875,  5.198513,  5.200151,  5.20179   # 5.025
        ,  5.20343,  5.205069,  5.20671,  5.20835,  5.209991   # 5.05
        ,  5.211633,  5.213275,  5.214917,  5.216559,  5.218202   # 5.075
        ,  5.219846,  5.22149,  5.223134,  5.224778,  5.226423   # 5.1
        ,  5.228069,  5.229714,  5.23136,  5.233006,  5.234653   # 5.125
        ,  5.2363,  5.237947,  5.239595,  5.241243,  5.242891   # 5.15
        ,  5.244539,  5.246188,  5.247837,  5.249486,  5.251136   # 5.175
        ,  5.252786,  5.254436,  5.256086,  5.257737,  5.259387   # 5.2
        ,  5.261038,  5.26269,  5.264341,  5.265993,  5.267645   # 5.225
        ,  5.269297,  5.272531,  5.274175,  5.275819,  5.277463   # 5.25
        ,  5.279108,  5.280752,  5.282397,  5.284042,  5.285688   # 5.275
        ,  5.287333,  5.288979,  5.290625,  5.292271,  5.293917   # 5.3
        ,  5.295563,  5.29721,  5.298856,  5.300503,  5.30215   # 5.325
        ,  5.303797,  5.305444,  5.307091,  5.308739,  5.310386   # 5.35
        ,  5.312034,  5.313681,  5.339324,  5.340888,  5.342452   # 5.375
        ,  5.344017,  5.345582,  5.347147,  5.348713,  5.350279   # 5.4
        ,  5.351845,  5.353411,  5.354978,  5.356544,  5.358112   # 5.425
        ,  5.359679,  5.361247,  5.362814,  5.364382,  5.365951   # 5.45
        ,  5.367519,  5.369088,  5.370657,  5.372226,  5.373795   # 5.475
        ,  5.375365,  5.376934,  5.378504,  5.380074,  5.381644   # 5.5
        ,  5.383214,  5.384785,  5.386355,  5.387926,  5.389497   # 5.525
        ,  5.391068,  5.392639,  5.39421,  5.395782,  5.397353   # 5.55
        ,  5.398925,  5.400496,  5.402068,  5.40364,  5.405212   # 5.575
        ,  5.406784,  5.408356,  5.409928,  5.4115,  5.413072   # 5.6
        ,  5.414644,  5.416216,  5.417789,  5.419361,  5.420933   # 5.625
        ,  5.422506,  5.424078,  5.42565,  5.427223,  5.428795   # 5.65
        ,  5.430368,  5.43194,  5.433512,  5.435084,  5.436657   # 5.675
        ,  5.438229,  5.439801,  5.441373,  5.442945,  5.444517   # 5.7
        ,  5.446089,  5.447661,  5.449233,  5.450805,  5.452376   # 5.725
        ,  5.453948,  5.455519,  5.457091,  5.458662,  5.460233   # 5.75
        ,  5.461804,  5.463375,  5.464946,  5.466517,  5.468087   # 5.775
        ,  5.469658,  5.471228,  5.472798,  5.474368,  5.475938   # 5.8
        ,  5.477508,  5.479077,  5.480647,  5.482216,  5.483785   # 5.825
        ,  5.485354,  5.486922,  5.488491,  5.495425,  5.496968   # 5.85
        ,  5.498511,  5.500055,  5.501598,  5.503141,  5.504684   # 5.875
        ,  5.506226,  5.507769,  5.509311,  5.510854,  5.512396   # 5.9
        ,  5.513938,  5.51548,  5.517022,  5.518563,  5.520105   # 5.925
        ,  5.521646,  5.523187,  5.524728,  5.526269,  5.527809   # 5.95
        ,  5.529349,  5.530889,  5.532429,  5.533969,  5.535508   # 5.975
        ,  5.537048,  5.538587,  5.540127,  5.541667,  5.543207   # 6
        ,  5.544748,  5.54629,  5.547831,  5.549373,  5.550916   # 6.025
        ,  5.552459,  5.554002,  5.555545,  5.557773,  5.559314   # 6.05
        ,  5.560854,  5.562396,  5.563937,  5.565479,  5.567021   # 6.075
        ,  5.568564,  5.570107,  5.57165,  5.573193,  5.574737   # 6.1
        ,  5.576281,  5.577826,  5.57937,  5.580915,  5.582461   # 6.125
        ,  5.584006,  5.585552,  5.587098,  5.588644,  5.590191   # 6.15
        ,  5.591738,  5.593285,  5.594832,  5.59638,  5.597928   # 6.175
        ,  5.599476,  5.601024,  5.602572,  5.604121,  5.60567   # 6.2
        ,  5.607219,  5.608768,  5.610318,  5.611867,  5.613417   # 6.225
        ,  5.614967,  5.616517,  5.618067,  5.619618,  5.621168   # 6.25
        ,  5.622719,  5.62427,  5.625821,  5.627372,  5.628923   # 6.275
        ,  5.630475,  5.632026,  5.633578,  5.63513,  5.636681   # 6.3
        ,  5.638233,  5.639785,  5.641337,  5.64289,  5.644442   # 6.325
        ,  5.645994,  5.647546,  5.649099,  5.650651,  5.652204   # 6.35
        ,  5.653756,  5.655309,  5.656862,  5.658414,  5.659967   # 6.375
        ,  5.66152,  5.674695,  5.676204,  5.677712,  5.679221   # 6.4
        ,  5.680729,  5.682238,  5.683747,  5.685256,  5.686765   # 6.425
        ,  5.688275,  5.689784,  5.691294,  5.692803,  5.694313   # 6.45
        ,  5.695823,  5.697333,  5.698843,  5.700353,  5.701863   # 6.475
        ,  5.703373,  5.704884,  5.706394,  5.707904,  5.709415   # 6.5
        ,  5.710925,  5.712436,  5.713946,  5.715457,  5.716968   # 6.525
        ,  5.718478,  5.719989,  5.7215,  5.72301,  5.724521   # 6.55
        ,  5.726032,  5.727542,  5.729053,  5.730564,  5.732074   # 6.575
        ,  5.733585,  5.735095,  5.736606,  5.738116,  5.739627   # 6.6
        ,  5.741137,  5.742647,  5.744157,  5.745668,  5.747178   # 6.625
        ,  5.748688,  5.750198,  5.751707,  5.753217,  5.754727   # 6.65
        ,  5.756236,  5.757746,  5.759255,  5.760764,  5.762274   # 6.675
        ,  5.763783,  5.765292,  5.7668,  5.770844,  5.77234   # 6.7
        ,  5.773837,  5.775333,  5.77683,  5.778326,  5.779822   # 6.725
        ,  5.781318,  5.782814,  5.784309,  5.785805,  5.7873   # 6.75
        ,  5.788796,  5.790291,  5.83112,  5.832524,  5.833929   # 6.775
        ,  5.835333,  5.857989,  5.859327,  5.860665,  5.862003   # 6.8
        ,  5.863341,  5.86468,  5.866018,  5.867356,  5.868695   # 6.825
        ,  5.870034,  5.871372,  5.872711,  5.87405,  5.875389   # 6.85
        ,  5.876727,  5.878361,  5.879698,  5.881036,  5.882373   # 6.875
        ,  5.883711,  5.885048,  5.886386,  5.887723,  5.889061   # 6.9
        ,  5.890399,  5.891736,  5.893074,  5.894412,  5.895749   # 6.925
        ,  5.897087,  5.898424,  5.899762,  5.9011,  5.902437   # 6.95
        ,  5.903775,  5.905113,  5.90645,  5.907788,  5.909125   # 6.975
        ,  5.910462,  5.9118,  5.913137,  5.914475,  5.915812   # 7
        ,  5.917149,  5.918486,  5.919823,  5.92116,  5.922497   # 7.025
        ,  5.923834,  5.925171,  5.926507,  5.927844,  5.929181   # 7.05
        ,  5.930517,  5.931853,  5.93319,  5.934526,  5.935862   # 7.075
        ,  5.937198,  5.938533,  5.939869,  5.941205,  5.94254   # 7.1
        ,  5.943875,  5.945211,  5.946546,  5.94788,  5.949215   # 7.125
        ,  5.95055,  5.951884,  5.953219,  5.954553,  5.955887   # 7.15
        ,  5.957221,  5.958554,  5.959888,  5.961221,  5.962554   # 7.175
        ,  5.963887,  5.96522,  5.966553,  5.967885,  5.969218   # 7.2
        ,  5.97055,  5.971882,  5.973213,  5.974545,  5.975876   # 7.225
        ,  5.977207,  5.978538,  5.979869,  5.981199,  5.982529   # 7.25
        ,  5.983859,  5.985189,  5.986518,  5.987848,  5.989177   # 7.275
        ,  5.990506,  5.991834,  5.993163,  5.994491,  5.995819   # 7.3
        ,  5.997146,  5.998473,  6.00556,  6.006863,  6.008167   # 7.325
        ,  6.00947,  6.010773,  6.012076,  6.013378,  6.014681   # 7.35
        ,  6.015983,  6.017285,  6.018587,  6.019888,  6.02119   # 7.375
        ,  6.022491,  6.023792,  6.025092,  6.026393,  6.027693   # 7.4
        ,  6.028993,  6.030293,  6.031593,  6.032892,  6.034191   # 7.425
        ,  6.03549,  6.036789,  6.038087,  6.039385,  6.040683   # 7.45
        ,  6.041988,  6.043334,  6.044681,  6.046028,  6.047374   # 7.475
        ,  6.048721,  6.050069,  6.051416,  6.052764,  6.054111   # 7.5
        ,  6.055459,  6.056807,  6.058155,  6.059504,  6.060852   # 7.525
        ,  6.062201,  6.06355,  6.066086,  6.067429,  6.068772   # 7.55
        ,  6.070116,  6.07146,  6.072803,  6.074147,  6.075492   # 7.575
        ,  6.076836,  6.07818,  6.079525,  6.080869,  6.082214   # 7.6
        ,  6.083559,  6.084904,  6.086249,  6.087594,  6.088939   # 7.625
        ,  6.090284,  6.091629,  6.092975,  6.09432,  6.095666   # 7.65
        ,  6.097011,  6.098357,  6.099703,  6.101048,  6.102394   # 7.675
        ,  6.103867,  6.105212,  6.106557,  6.107902,  6.109248   # 7.7
        ,  6.110593,  6.111938,  6.113284,  6.114629,  6.115974   # 7.725
        ,  6.11732,  6.118665,  6.12001,  6.121356,  6.122701   # 7.75
        ,  6.124047,  6.125392,  6.126737,  6.128083,  6.129428   # 7.775
        ,  6.130773,  6.132118,  6.133464,  6.134809,  6.136154   # 7.8
        ,  6.137499,  6.138844,  6.140189,  6.141534,  6.142878   # 7.825
        ,  6.144223,  6.145568,  6.146913,  6.148257,  6.149601   # 7.85
        ,  6.150946,  6.15229,  6.153634,  6.154978,  6.166889   # 7.875
        ,  6.168196,  6.169504,  6.170811,  6.172118,  6.173425   # 7.9
        ,  6.174732,  6.176039,  6.177347,  6.178654,  6.179961   # 7.925
        ,  6.181268,  6.182575,  6.183882,  6.185189,  6.186496   # 7.95
        ,  6.187803,  6.189109,  6.190416,  6.191723,  6.193029   # 7.975
        ,  6.194336,  6.195643,  6.19695,  6.198257,  6.199565   # 8
        ,  6.200874,  6.202182,  6.203492,  6.204801,  6.206111   # 8.025
        ,  6.207421,  6.208732,  6.210042,  6.211354,  6.212665   # 8.05
        ,  6.213977,  6.21529,  6.216602,  6.217915,  6.219228   # 8.075
        ,  6.220542,  6.221856,  6.22317,  6.224485,  6.2258   # 8.1
        ,  6.227115,  6.228431,  6.229746,  6.231062,  6.232379   # 8.125
        ,  6.233695,  6.235012,  6.23633,  6.237647,  6.238965   # 8.15
        ,  6.240283,  6.241601,  6.24292,  6.244239,  6.245558   # 8.175
        ,  6.246877,  6.248197,  6.249517,  6.250837,  6.252157   # 8.2
        ,  6.253477,  6.25765,  6.258959,  6.260268,  6.261578   # 8.225
        ,  6.262887,  6.264197,  6.265508,  6.266818,  6.268129   # 8.25
        ,  6.26944,  6.270751,  6.272062,  6.273374,  6.274686   # 8.275
        ,  6.275998,  6.27731,  6.278623,  6.279936,  6.281248   # 8.3
        ,  6.282562,  6.283875,  6.285188,  6.304074,  6.305336   # 8.325
        ,  6.306599,  6.307862,  6.309125,  6.310389,  6.311652   # 8.35
        ,  6.312917,  6.314181,  6.315446,  6.316711,  6.317976   # 8.375
        ,  6.319241,  6.320507,  6.32232,  6.323584,  6.324848   # 8.4
        ,  6.326112,  6.327376,  6.328641,  6.329905,  6.33117   # 8.425
        ,  6.332436,  6.333701,  6.334967,  6.336233,  6.337499   # 8.45
        ,  6.338765,  6.340032,  6.341298,  6.342565,  6.343833   # 8.475
        ,  6.3451,  6.346367,  6.347635,  6.348903,  6.350171   # 8.5
        ,  6.351439,  6.352762,  6.35403,  6.355298,  6.356567   # 8.525
        ,  6.357836,  6.359105,  6.388817,  6.390019,  6.391222   # 8.55
        ,  6.392425,  6.393628,  6.394832,  6.396036,  6.397239   # 8.575
        ,  6.398444,  6.399648,  6.400853,  6.402057,  6.403262   # 8.6
        ,  6.404468,  6.405673,  6.406879,  6.408084,  6.40929   # 8.625
        ,  6.410497,  6.411703,  6.412909,  6.414116,  6.415323   # 8.65
        ,  6.41653,  6.417737,  6.418945,  6.420152,  6.42136   # 8.675
        ,  6.422568,  6.423776,  6.424984,  6.426192,  6.4274   # 8.7
        ,  6.428609,  6.429817,  6.431026,  6.432235,  6.433444   # 8.725
        ,  6.434653,  6.435862,  6.437072,  6.438281,  6.439491   # 8.75
        ,  6.4407,  6.44191,  6.44312,  6.44433,  6.44554   # 8.775
        ,  6.44675,  6.44796,  6.449171,  6.450381,  6.451591   # 8.8
        ,  6.452802,  6.454012,  6.455223,  6.456434,  6.457644   # 8.825
        ,  6.458855,  6.460066,  6.461277,  6.462488,  6.469102   # 8.85
        ,  6.470293,  6.471484,  6.472675,  6.473867,  6.475058   # 8.875
        ,  6.47625,  6.477441,  6.478633,  6.479824,  6.481016   # 8.9
        ,  6.482208,  6.4834,  6.484592,  6.485784,  6.486976   # 8.925
        ,  6.488168,  6.48936,  6.490552,  6.491745,  6.492937   # 8.95
        ,  6.494129,  6.495322,  6.496514,  6.497707,  6.498899   # 8.975
        ,  6.500092,  6.501284,  6.502477,  6.503669,  6.504862   # 9
        ,  6.506055,  6.507247,  6.50844,  6.509632,  6.510825   # 9.025
        ,  6.512018,  6.51321,  6.514403,  6.515595,  6.516788   # 9.05
        ,  6.51798,  6.519173,  6.520365,  6.521558,  6.52275   # 9.075
        ,  6.523943,  6.525135,  6.527727,  6.528914,  6.5301   # 9.1
        ,  6.531286,  6.532472,  6.533658,  6.534844,  6.53603   # 9.125
        ,  6.537216,  6.538402,  6.539588,  6.540774,  6.54196   # 9.15
        ,  6.543146,  6.544331,  6.545517,  6.546703,  6.547888   # 9.175
        ,  6.549074,  6.550259,  6.551444,  6.55263,  6.553815   # 9.2
        ,  6.555,  6.556185,  6.55737,  6.558555,  6.559739   # 9.225
        ,  6.560924,  6.56236,  6.563544,  6.564727,  6.56591   # 9.25
        ,  6.567093,  6.568276,  6.569458,  6.570641,  6.571823   # 9.275
        ,  6.573006,  6.574188,  6.57537,  6.576552,  6.577734   # 9.3
        ,  6.578916,  6.580098,  6.581279,  6.582461,  6.583642   # 9.325
        ,  6.584823,  6.586004,  6.587185,  6.588388,  6.589569   # 9.35
        ,  6.590749,  6.591929,  6.593109,  6.594289,  6.595469   # 9.375
        ,  6.596648,  6.597827,  6.599007,  6.600186,  6.601364   # 9.4
        ,  6.602543,  6.603722,  6.6049,  6.606078,  6.607256   # 9.425
        ,  6.608434,  6.61863,  6.619778,  6.620926,  6.622074   # 9.45
        ,  6.623222,  6.624369,  6.625517,  6.626664,  6.627811   # 9.475
        ,  6.628958,  6.630105,  6.631252,  6.632399,  6.633546   # 9.5
        ,  6.634692,  6.635838,  6.636984,  6.63813,  6.639276   # 9.525
        ,  6.640422,  6.641568,  6.642713,  6.643858,  6.645003   # 9.55
        ,  6.646148,  6.647293,  6.648438,  6.649582,  6.650726   # 9.575
        ,  6.65187,  6.653014,  6.654158,  6.655301,  6.656445   # 9.6
        ,  6.657588,  6.658731,  6.659874,  6.661016,  6.662159   # 9.625
        ,  6.663301,  6.664443,  6.665585,  6.666727,  6.667868   # 9.65
        ,  6.669009,  6.67015,  6.671291,  6.672432,  6.673572   # 9.675
        ,  6.674712,  6.675852,  6.676992,  6.678132,  6.679271   # 9.7
        ,  6.68041,  6.681549,  6.682687,  6.683826,  6.684964   # 9.725
        ,  6.686102,  6.68724,  6.688377,  6.689514,  6.690651   # 9.75
        ,  6.691788,  6.692925,  6.694061,  6.695197,  6.699107   # 9.775
        ,  6.700232,  6.701357,  6.702481,  6.703605,  6.704729   # 9.8
        ,  6.705852,  6.706976,  6.708099,  6.709222,  6.710345   # 9.825
        ,  6.711467,  6.71259,  6.713712,  6.714833,  6.715955   # 9.85
        ,  6.717076,  6.718197,  6.719318,  6.720439,  6.721559   # 9.875
        ,  6.722679,  6.723799,  6.724919,  6.726038,  6.727157   # 9.9
        ,  6.728276,  6.729395,  6.730513,  6.731631,  6.732749   # 9.925
        ,  6.733866,  6.74901,  6.750087,  6.751164,  6.752242   # 9.95
        ,  6.753319,  6.755077,  6.756151,  6.757224,  6.758298   # 9.975
        ,  6.759371]


    """
    Function to return upper limit sensitivity for corresponding background estimate
    using Feldman-Cousins at 90%CL
    """
    def return_FeldmanCousins_sensitivity(self, background_mean):
        if (background_mean < 10): # have only values up to 10 background events in table, will not work for wide DIO spectrum
                nb        = 2001
                bInterval = 0.005
                background_mean_rounded_array_index = TMath.Nint(background_mean / bInterval)
                if (background_mean_rounded_array_index>0):
                    if (background_mean_rounded_array_index < nb):
                        print("background_mean_rounded_array_index : ", background_mean_rounded_array_index)
                        return FeldmanCousins_sensitivityValues[background_mean_rounded_array_index]
                    else:
                        return 0
                else:
                     return 0
        else:
            return 999


    class YieldFunctions:

        def __init__(self,histos):
            self.momentum_lower_limit = 90.
            self.momentum_upper_limit = 110.
            self.nBins = 400
            self.nBin_steps = (self.momentum_upper_limit-self.momentum_lower_limit)/self.nBins
            self.momentum_Bin_width = 0.05
            self.signal_start = 103.75
            self.signal_end = 105.45
            self.POT = 3.6e20
            self.capturesperStop = 0.609
            self.decaysperStop = 0.391
            self.Histos = histos
            self.Results = []
            # Fill DIO Functions:
            DIO = DIO()
            self._diocz_f = TF1("_diocz_f",DIO.DIOCZ,momentum_lower_limit,momentum_upper_limit,1)
            self._diocz_f.SetLineColor(kGreen)
            self._diocz_f.SetParameter(0,1.0)
            dio_weight =  calculate_DIOweight(fit_mom_DIO_generated)

        def GetIntegral(self, histo, mom_low, mom_high):
            # Translate mom_low and mom_up in bin numbers
            bin_low = TMath.Nint((mom_low - self.momentum_lower_limit) / self.momentum_Bin_width) + 1
            bin_high = TMath.Nint((mom_high - self.momentum_lower_limit) / self.momentum_Bin_width) + 1
            return histo.Integral(bin_low,bin_high)

        def GetNReco(self, histo, mom_low, mom_high, process):
            Nrec = GetIntegral(histo, mom_low, mom_high)
            if (abs(mom_low - 103.5) < 0.01 and abs(mom_high - 105.5) < 0.01):#TODO remove hardcoding
                print("Nrec = ", Nrec)
            return Nrec

        def GetNRecoError(self, histo, mom_low,  mom_high, process):
            Nrec_error = 0
            # compute error from sum of weigths in the bins
            # translate mom_low and mom_up in bin numbers
            bin_low = TMath.Nint((mom_low - self.momentum_lower_limit) / self.momentum_Bin_width)+1
            bin_high = TMath.Nint((mom_high - self.momentum_lower_limit) / self.momentum_Bin_width)+1
            temp_error_sum = 0
            for i in range(bin_low, bin_high):
                temp_error_sum += pow(histo.GetBinError(i), 2)
            Nrec_error = math.sqrt(temp_error_sum)
            return Nrec_error

        def GetRecoEff(self, Nrec, Ngen):
            efficiency = Nrec / Ngen
            return efficiency

        def GetRecoEffError(self, Nrec, Ngen):
            """
            use Glen Cowan derivation of efficiency error based on a binomial distribution
            http://www.pp.rhul.ac.uk/~cowan/stat/notes/efferr.pdf
            """
            efficiency_error = math.sqrt(Nrec * (1. - Nrec/Ngen)) / Ngen
            return efficiency_error

        def GetDIOEffError(self, Nrec, Nrec_error, Ngen, Ngen_error):
            efficiency_error = sqrt( pow(Nrec_error / Ngen, 2) + pow( Nrec * Ngen_error / (Ngen*Ngen), 2) )
            return efficiency_error


        def GetSignalExpectedYield(self, POT, stopsperPOT, capturesperStop, efficiency_CE):
            # assume BF of 10E-16 and calculate expected signal for this BF
            BF_assumption=1E-16
            N_CE_expected = POT * stopsperPOT * capturesperStop * BF_assumption * efficiency_CE
            return N_CE_expected

        #TODO: Make this its own class:
        def GetSES(self, POT, stopsperPOT, capturesperStop, efficiency_CE):
            # calculate single event sensitivity (SES), corresponds to branching fraction where 1 signal event is observed
        	SES = 1. / ( POT * stopsperPOT * capturesperStop * efficiency_CE )
        	return SES

        def GetSESError(self, POT, stopsperPOT, capturesperStop, efficiency_CE, efficiency_error_CE):
            # calculate error of single event sensitivity (SES), corresponds to uncertainting on branching fraction where 1 signal event is observed
            SES = 1. / ( POT * stopsperPOT * capturesperStop * pow(efficiency_CE, 2) ) * efficiency_error_CE # error propagation on SES calculation
            return SES

        def GetDIOExpectedYield(self, N_DIO_rec, N_DIO_gen, POT, stopsperPOT, decaysperStop, mom_low, mom_high):
            G_number_DIOs_represented = self._diocz_f.Integral(mom_low,mom_high);
            N_DIO_expected = N_DIO_rec * G_number_DIOs_represented * POT * stopsperPOT * decaysperStop / N_DIO_gen;
            N_DIO_expected_error = G_number_DIOs_represented * POT * stopsperPOT * decaysperStop * efficiency_error_DIO # compute error on N_DIO_expected from error on the efficiency
            if (abs(mom_low-self.signal_start) < 0.01 and abs(mom_high-self.signal_end) < 0.01):
                print( "===========================================================================")
                print( "N_DIO_rec = " , N_DIO_rec )
                print( "N_DIO_gen = " , N_DIO_gen )
                print( "POT = " , POT )
                print( "stopsperPOT = " , stopsperPOT)
                print( "decaysperStop = " , decaysperStop )
                print( "G_number_DIOs_represented = " , G_number_DIOs_represented )
                print( "N_DIO_expected = " , N_DIO_expected )
                print( "N_DIO_expected_error = " , N_DIO_expected_error)
            return N_DIO_expected, N_DIO_expected_error

        def GetRPCExpectedYield(self, integral_RPCs, integral_RPCs_error, mom_low, mom_high): #TODO - add in same functionality as RPC
            integral_RPCs_error = 0
            integral_RPCs = histo_RPCs.IntegralAndError( histo_RPCs.FindBin(mom_low), histo_RPCs.FindBin(mom_high), integral_RPCs_error )
            return integral_RPCs, integral_RPCs_error

        def GetBFUL(self, Nsig_UL, POT, stopsperPOT, capturesperStop, efficiency_CE):
            BF_upper_limit = Nsig_UL / ( POT * stopsperPOT * capturesperStop * efficiency_CE )
            return BF_upper_limit

        def GetBFULError(self, Nsig_UL, Nsig_UL_error, POT, stopsperPOT, capturesperStop, efficiency_CE, efficiency_error_CE):
            BF_upper_limit_error = 1. / (POT * stopsperPOT * capturesperStop) * math.sqrt(pow(Nsig_UL_error/efficiency_CE, 2)
            + pow(Nsig_UL * efficiency_error_CE/(efficiency_CE*efficiency_CE), 2))
            return BF_upper_limit_error

        def stopsperPOT(self, Ngen_CE):
            return Ngen_CE / (75. * 100. * 10000.)

        def isfinite(self, value):
            return TMath.Finite(value)

        def FillResults(self):
            mom_low=self.momentum_lower_limit
            stats = StatsFunctions()
            while( mom_low < self.momentum_upper_limit):
                mom_high=mom_low+0.05
                while(mom_high < self.momentum_upper_limit):
                    #perform calculations, check results for reasanable values and for infinity or NaN, save results
                    result = Results()
                    self.Results.momentum_low = mom_low
                    if (isfinite(result.momentum_low)<1):
                        continue

                    result.momentum_high=mom_high
                    if (isfinite(result.momentum_high)<1):
                        continue

                    result.N_CE_gen=Ngen_CE #TODO
                    if (isfinite(result.N_CE_gen)<1):
                        continue

                    result.N_CE_rec = self.GetNReco(histo_CE_reconstructed,mom_low,mom_high)
                    if (isfinite(result.N_CE_rec)<1):
                        continue

                    result.efficiency_CE = self.GetRecoEff(result.N_CE_rec,result.N_CE_gen)
                    if (isfinite(result.efficiency_CE)<1):
                         continue

                    result.efficiency_error_CE = self.GetRecoEffError(result.N_CE_rec,result.N_CE_gen)
                    if (isfinite(result.efficiency_error_CE)<1):
                        continue

                    result.N_CE_expected = self.GetSignalExpectedYield(POT,stopsperPOT,capturesperStop,result.efficiency_CE);
                    if (isfinite(result.N_CE_expected)<1):
                        continue
                    if (result.N_CE_expected==0):
                        continue

                    result.N_CE_expected_error = self.GetSignalExpectedYield(POT,stopsperPOT,capturesperStop,result.efficiency_error_CE);
                    if (isfinite(result.N_CE_expected_error)<1):
                        continue
                    if (result.N_CE_expected_error==0):
                        continue

                    result.SES = self.GetSES(POT,stopsperPOT,capturesperStop,result.efficiency_CE)
                    if (isfinite(result.SES)<1):
                        continue

                    result.SES_error = self.GetSESError(POT,stopsperPOT,capturesperStop,result.efficiency_CE,result.efficiency_error_CE)
                    if (isfinite(result.SES_error)<1):
                        continue

                    result.N_DIO_gen = self.GetNReco(histo_DIO_generated_reweighted, mom_low,mom_high); # use same function as for reconstructed DIOs to integrate histograms
                    if (isfinite(result.N_DIO_gen)<1):
                        continue

                    print("Results.N_DIO_gen = ",result.N_DIO_gen)

                    result.N_DIO_gen_erro = self.GetNRecoError(histo_DIO_generated_reweighted, mom_low,mom_high)
                    if (isfinite(result.N_DIO_gen_error)<1):
                        continue
                    result.N_DIO_rec = self.GetNReco(histo_DIO_reconstructed_reweighted,mom_low,mom_high)
                    if (isfinite(result.N_DIO_rec)<1):
                        continue
                    print("Result.N_DIO_rec = ",result.N_DIO_rec)

                    result.N_DIO_rec_error = self.GetNRecoError(histo_DIO_reconstructed_reweighted,mom_low,mom_high)
                    if (isfinite(result.N_DIO_rec_error)<1):
                        continue

                    result.efficiency_DIO = self.GetRecoEff(result.N_DIO_rec,result.N_DIO_gen)
                    if (isfinite(result.efficiency_DIO)<1):
                        continue

                    result.efficiency_error_DIO = self.GetDIOEffError(result.N_DIO_rec, result.N_DIO_rec_error, result.N_DIO_gen, result.N_DIO_gen_error);
                    if (isfinite(result.efficiency_error_DIO)<1):
                        continue

                    result.N_DIO_expected, result.N_DIO_expected_erro = self.GetDIOExpectedYield(result.N_DIO_rec,result.N_DIO_gen,POT,stopsperPOT,decaysperStop,mom_low,mom_high);
                    if (isfinite(result.N_DIO_expected)<1):
                        continue

                    self.GetRPCExpectedYield(result.N_RPCs_expected, result.N_RPCs_expected_error, mom_low, mom_high)
                    if (isfinite(result.N_RPCs_expected)<1):
                        continue

                    result.Nsig_UL = stats.return_FeldmanCousins_sensitivity(result.N_DIO_expected + result.N_RPCs_expected)
                    if (isfinite(result.Nsig_UL)<1):
                        continue

                    # calculate error on Nsig_UL by calculation of the Feldman-Cousins sensitivity of N_DIO_expected - 1*sigma and N_DIO_expected + 1*sigma, take maximum of both values
                    result.Nsig_UL_error = 999
                    if (result.Nsig_UL != 999):

                        temp_Nsig_UL_error_lower = result.Nsig_UL - stats.return_FeldmanCousins_sensitivity(result.N_DIO_expected - result.N_DIO_expected_error)
                        temp_Nsig_UL_error_upper = stats.return_FeldmanCousins_sensitivity(result.N_DIO_expected + result.N_DIO_expected_error) - result.Nsig_UL

                        result.Nsig_UL_error = max(temp_Nsig_UL_error_lower, temp_Nsig_UL_error_upper) # take maximum of errors to avoid asymmetric errors on Nsig_UL

                    result.BF_UL = self.GetBFUL(result.Nsig_UL,POT,stopsperPOT,capturesperStop,result.efficiency_CE);
                    if (isfinite(result.BF_UL)<1):
                        continue
                    if (result.BF_UL==0):
                        continue

                    result.BF_UL_error = self.GetBFULError(results.Nsig_UL,results.Nsig_UL_error,POT,stopsperPOT,capturesperStop,results.efficiency_CE,results.efficiency_error_CE);
                    if (isfinite(result.BF_UL_error)<1):
                        continue
                    if (result.BF_UL_error==0):
                        continue

                    result.optimal_window=0 # set optimal window flag to 0, set flag to 1 for optimal window entry later

                    self.Results.append(result)
                    mom_high+=momentum_Bin_width
                mom_low+=momentum_Bin_width
